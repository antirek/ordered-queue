const OrderedQueueWithRetry = require('../queues/ordered-queue-with-retry');
require('dotenv').config();

async function orderedQueueExample() {
  console.log('üöÄ Starting Ordered Queue Example with Retry Logic');
  
  // –°–æ–∑–¥–∞–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
  const queue = new OrderedQueueWithRetry('ordered-example-queue');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å
    await queue.initialize();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    queue.setRetryConfig(3, 5000); // 3 –ø–æ–ø—ã—Ç–∫–∏, –∑–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å
    queue.registerProcessor('ordered-task', async (data, job) => {
      const { message, shouldFail, order } = data;
      
      console.log(`üìù Processing task: ${message} (Order: ${order})`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –ø–∞–¥–∞—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      if (shouldFail) {
        console.log(`‚ùå Task ${message} (Order: ${order}) will fail`);
        throw new Error(`Simulated failure for task ${message}`);
      }
      
      console.log(`‚úÖ Task ${message} (Order: ${order}) completed successfully`);
      return { success: true, message, order, processedAt: new Date().toISOString() };
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    queue.start();
    
    console.log('\nüìã Adding ordered tasks to queue...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const tasks = [
      { message: 'First task', shouldFail: false, order: 1 },
      { message: 'Second task', shouldFail: true, order: 2 },  // –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–ø–∞–¥–µ—Ç
      { message: 'Third task', shouldFail: false, order: 3 },
      { message: 'Fourth task', shouldFail: true, order: 4 },  // –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Ç–æ–∂–µ —É–ø–∞–¥–µ—Ç
      { message: 'Fifth task', shouldFail: false, order: 5 },
      { message: 'Sixth task', shouldFail: false, order: 6 },
    ];
    
    for (const task of tasks) {
      await queue.addJob('ordered-task', task);
      console.log(`‚ûï Added task: ${task.message} (Order: ${task.order})`);
    }
    
    console.log('\n‚è≥ Monitoring queue status...');
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    let interval = setInterval(async () => {
      try {
        const stats = await queue.getOrderedJobCounts();
        
        console.log('\nüìä --- Queue Status ---');
        console.log(`Total jobs added: ${stats.totalOrder}`);
        console.log(`Waiting: ${stats.waiting}`);
        console.log(`Active: ${stats.active}`);
        console.log(`Completed: ${stats.completed}`);
        console.log(`Failed: ${stats.failed}`);
        console.log(`Delayed: ${stats.delayed}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–æ—Ä—è–¥–∫–µ
        if (stats.orderedWaiting.length > 0) {
          console.log('\n‚è∏Ô∏è  Waiting tasks (in order):');
          stats.orderedWaiting.forEach(task => {
            console.log(`   ${task.order}. ${task.name} (Retry: ${task.retryCount})`);
          });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø–æ—Ä—è–¥–∫–µ
        if (stats.orderedDelayed.length > 0) {
          console.log('\n‚è∞ Delayed tasks (in order):');
          stats.orderedDelayed.forEach(task => {
            console.log(`   ${task.order}. ${task.name} (Retry: ${task.retryCount}, Delay: ${task.delay}ms)`);
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏
        if (stats.waiting === 0 && stats.active === 0 && stats.delayed === 0) {
          clearInterval(interval);
          console.log('\nüéâ All tasks completed!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const finalStats = await queue.getOrderedJobCounts();
          console.log('\nüìà Final Statistics:');
          console.log(JSON.stringify(finalStats, null, 2));
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
          await queue.close();
          console.log('\nüèÅ Ordered queue example completed!');
        }
      } catch (error) {
        console.error('‚ùå Error getting stats:', error);
      }
    }, 2000);
    
    // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
    setTimeout(() => {
      clearInterval(interval);
      console.log('\n‚è∞ Timeout reached, closing...');
      queue.close();
    }, 120000);
    
  } catch (error) {
    console.error('‚ùå Error in ordered queue example:', error);
    await queue.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
if (require.main === module) {
  orderedQueueExample().catch(console.error);
}

module.exports = orderedQueueExample;
