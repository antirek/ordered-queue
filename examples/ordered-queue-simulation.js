// –°–∏–º—É–ª—è—Ü–∏—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–µ–∑ Redis

class OrderedQueueSimulation {
  constructor() {
    this.queue = [];
    this.processingOrder = new Map();
    this.currentOrder = 0;
    this.maxRetries = 3;
    this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    this.isProcessing = false;
    this.processors = new Map();
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  registerProcessor(jobName, processor) {
    this.processors.set(jobName, processor);
    console.log(`üìù Processor registered for: ${jobName}`);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
  async addJob(jobName, data) {
    const order = this.currentOrder++;
    
    const job = {
      id: `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: jobName,
      data: {
        ...data,
        _order: order,
        _originalData: data,
        _retryCount: 0,
        _maxRetries: this.maxRetries
      },
      status: 'waiting',
      createdAt: new Date()
    };

    this.queue.push(job);
    this.processingOrder.set(job.id, order);
    
    console.log(`‚ûï Added job: ${jobName} (Order: ${order}, ID: ${job.id})`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if (!this.isProcessing) {
      this.processNext();
    }
    
    return job;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
  async processNext() {
    if (this.isProcessing || this.queue.length === 0) {
      return;
    }

    this.isProcessing = true;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    this.queue.sort((a, b) => a.data._order - b.data._order);
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
    const job = this.queue.shift();
    
    if (!job) {
      this.isProcessing = false;
      return;
    }

    console.log(`\nüîÑ Processing job: ${job.name} (Order: ${job.data._order}, ID: ${job.id})`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      if (!this.processors.has(job.name)) {
        throw new Error(`No processor registered for job type: ${job.name}`);
      }

      const processor = this.processors.get(job.name);
      const result = await processor(job.data._originalData, job);
      
      console.log(`‚úÖ Job ${job.name} (Order: ${job.data._order}) completed successfully`);
      console.log(`   Result:`, result);
      
    } catch (error) {
      console.log(`‚ùå Job ${job.name} (Order: ${job.data._order}) failed:`, error.message);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      await this.handleJobFailure(job, error);
    }
    
    this.isProcessing = false;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
    if (this.queue.length > 0) {
      this.processNext();
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –∑–∞–¥–∞—á—É
  async handleJobFailure(job, error) {
    const retryCount = job.data._retryCount || 0;
    const maxRetries = job.data._maxRetries || this.maxRetries;
    
    if (retryCount >= maxRetries) {
      console.log(`üö´ Job ${job.name} (Order: ${job.data._order}) exceeded max retries (${maxRetries})`);
      return;
    }

    console.log(`‚è∞ Scheduling retry ${retryCount + 1}/${maxRetries} for job ${job.name} (Order: ${job.data._order}) in ${this.retryDelay}ms`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
    const retryJob = {
      id: `retry_${job.id}_${Date.now()}`,
      name: job.name,
      data: {
        ...job.data._originalData,
        _order: job.data._order,        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫!
        _originalData: job.data._originalData,
        _retryCount: retryCount + 1,
        _maxRetries: maxRetries
      },
      status: 'delayed',
      createdAt: new Date(),
      retryAt: new Date(Date.now() + this.retryDelay)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      retryJob.status = 'waiting';
      this.queue.push(retryJob);
      this.processingOrder.set(retryJob.id, retryJob.data._order);
      
      console.log(`üîÑ Retry job ${retryJob.name} (Order: ${retryJob.data._order}) is now ready for processing`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
      if (!this.isProcessing) {
        this.processNext();
      }
    }, this.retryDelay);
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    const waiting = this.queue.filter(job => job.status === 'waiting');
    const delayed = this.queue.filter(job => job.status === 'delayed');
    
    return {
      totalOrder: this.currentOrder,
      waiting: waiting.length,
      delayed: delayed.length,
      isProcessing: this.isProcessing,
      orderedWaiting: waiting
        .map(job => ({
          id: job.id,
          name: job.name,
          order: job.data._order,
          retryCount: job.data._retryCount
        }))
        .sort((a, b) => a.order - b.order),
      orderedDelayed: delayed
        .map(job => ({
          id: job.id,
          name: job.name,
          order: job.data._order,
          retryCount: job.data._retryCount,
          retryAt: job.retryAt
        }))
        .sort((a, b) => a.order - b.order)
    };
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  setRetryConfig(maxRetries, retryDelay) {
    this.maxRetries = maxRetries;
    this.retryDelay = retryDelay;
    console.log(`‚öôÔ∏è  Retry config updated: maxRetries=${maxRetries}, retryDelay=${retryDelay}ms`);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function simulationExample() {
  console.log('üöÄ Starting Ordered Queue Simulation');
  
  const queue = new OrderedQueueSimulation();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  queue.setRetryConfig(3, 3000); // 3 –ø–æ–ø—ã—Ç–∫–∏, –∑–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å
  queue.registerProcessor('simulated-task', async (data, job) => {
    const { message, shouldFail, order } = data;
    
    console.log(`   üìù Processing: ${message} (Order: ${order})`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –ø–∞–¥–∞—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (shouldFail) {
      throw new Error(`Simulated failure for task ${message}`);
    }
    
    return { success: true, message, order, processedAt: new Date().toISOString() };
  });
  
  console.log('\nüìã Adding tasks to queue...');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const tasks = [
    { message: 'First task', shouldFail: false, order: 1 },
    { message: 'Second task', shouldFail: true, order: 2 },   // –£–ø–∞–¥–µ—Ç
    { message: 'Third task', shouldFail: false, order: 3 },
    { message: 'Fourth task', shouldFail: true, order: 4 },   // –£–ø–∞–¥–µ—Ç
    { message: 'Fifth task', shouldFail: false, order: 5 },
    { message: 'Sixth task', shouldFail: false, order: 6 },
  ];
  
  for (const task of tasks) {
    await queue.addJob('simulated-task', task);
  }
  
  console.log('\n‚è≥ Monitoring queue status...');
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  let interval = setInterval(() => {
    const stats = queue.getStats();
    
    console.log('\nüìä --- Queue Status ---');
    console.log(`Total jobs added: ${stats.totalOrder}`);
    console.log(`Waiting: ${stats.waiting}`);
    console.log(`Delayed: ${stats.delayed}`);
    console.log(`Currently processing: ${stats.isProcessing}`);
    
    if (stats.orderedWaiting.length > 0) {
      console.log('\n‚è∏Ô∏è  Waiting tasks (in order):');
      stats.orderedWaiting.forEach(task => {
        console.log(`   ${task.order}. ${task.name} (Retry: ${task.retryCount})`);
      });
    }
    
    if (stats.orderedDelayed.length > 0) {
      console.log('\n‚è∞ Delayed tasks (in order):');
      stats.orderedDelayed.forEach(task => {
        console.log(`   ${task.order}. ${task.name} (Retry: ${task.retryCount})`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏
    if (stats.waiting === 0 && stats.delayed === 0 && !stats.isProcessing) {
      clearInterval(interval);
      console.log('\nüéâ All tasks completed!');
      console.log('\nüèÅ Simulation completed!');
    }
  }, 1000);
  
  // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç—É
  setTimeout(() => {
    clearInterval(interval);
    console.log('\n‚è∞ Timeout reached, simulation ended');
  }, 60000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
if (require.main === module) {
  simulationExample().catch(console.error);
}

module.exports = { OrderedQueueSimulation, simulationExample };
